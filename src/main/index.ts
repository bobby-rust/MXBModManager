import {
	app,
	BrowserWindow,
	ipcMain,
	dialog,
	IpcMainInvokeEvent,
	IpcMain,
} from "electron";

import path from "node:path";
import fs, { mkdirSync } from "node:fs";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
	app.quit();
}

const createWindow = (): void => {
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		height: 600,
		width: 800,
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		},
	});

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	// Open the DevTools.
	mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
	if (process.platform !== "darwin") {
		app.quit();
	}
});

app.on("activate", () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
import yauzl from "yauzl";
import ini from "ini";
import os from "os";

const config = ini.parse(fs.readFileSync("config.ini", "utf-8"));

// Basic test handler
ipcMain.handle("hello", async () => {
	return "Hello from node.js!";
});

// Select a zip file
async function selectMod(): Promise<string | null> {
	const result = await dialog.showOpenDialog({
		properties: ["openFile"],
		filters: [{ name: "Archives", extensions: ["zip", "7z", "rar"] }],
	});

	return result.filePaths[0] ?? null;
}

// Install mod handler
ipcMain.handle("install-mod", async (event: IpcMainInvokeEvent) => {
	const modPath = await selectMod();
	if (!modPath) return;

	await unzipWithProgress(
		modPath,
		path.normalize(
			path.join(os.homedir(), "Documents", "PiBoSo", "MX Bikes")
		),
		(progress) => {
			event.sender.send("extract-progress", progress);
		}
	);
});

// Zip extraction with progress
export function unzipWithProgress(
	zipPath: string,
	outputDir: string,
	sendProgress: (progress: number) => void
): Promise<void> {
	return new Promise((resolve, reject) => {
		yauzl.open(zipPath, { lazyEntries: true }, (err, zipfile) => {
			if (err || !zipfile) return reject(err);

			let totalBytes = 0;
			let extractedBytes = 0;
			const entries: yauzl.Entry[] = [];

			zipfile.readEntry();

			// Pass 1: Collect entries
			zipfile.on("entry", (entry) => {
				entries.push(entry);
				totalBytes += entry.uncompressedSize;
				zipfile.readEntry();
			});

			zipfile.on("end", () => {
				// Pass 2: Extract entries
				yauzl.open(zipPath, { lazyEntries: true }, (err, zipfile) => {
					if (err || !zipfile) return reject(err);

					zipfile.readEntry();

					zipfile.on("entry", (entry) => {
						const entryPath = path.join(outputDir, entry.fileName);

						if (/\/$/.test(entry.fileName)) {
							mkdirSync(entryPath, { recursive: true });
							zipfile.readEntry();
						} else {
							mkdirSync(path.dirname(entryPath), {
								recursive: true,
							});

							zipfile.openReadStream(entry, (err, readStream) => {
								if (err || !readStream) return reject(err);

								const writeStream =
									fs.createWriteStream(entryPath);

								readStream.on("data", (chunk) => {
									extractedBytes += chunk.length;
									const progress =
										(extractedBytes / totalBytes) * 100;
									sendProgress(progress);
								});

								readStream.pipe(writeStream);

								writeStream.on("close", () => {
									zipfile.readEntry();
								});

								writeStream.on("error", reject);
							});
						}
					});

					zipfile.on("end", () => {
						sendProgress(100);
						resolve();
					});

					zipfile.on("error", reject);
				});
			});

			zipfile.on("error", reject);
		});
	});
}
